{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","boxColor","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","color","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","Signup","props","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","setBoxColor","maxW","centerContent","display","justifyContent","bg","w","m","borderRadius","borderWidth","bottom","left","variant","mr","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","d","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","label","placement","hasArrow","mt","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","borderColor","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Fuser","Chatpage","useLocation","state","App","backgroundImage","setBackgroundImage","randomNumber","Math","floor","random","imageUrl","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.537896cf.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = ({boxColor}) => {\n  const { setUser } = ChatState();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push('/chats', { boxColor: boxColor });\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\" >\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n            color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Signup = (props) => {\n\n  const { boxColor } = props; \n  const { setUser } = ChatState();\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push('/chats', { boxColor: boxColor });\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n          color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n          color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n            color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n            color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n          color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@chakra-ui/react\";\n\nfunction Homepage() {\n  const history = useHistory();\n  const [boxColor, setBoxColor] = useState(\"white\"); // new state variable\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg={boxColor}\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Button\n          position=\"absolute\"\n          bottom=\"10\"\n          left=\"10\"\n          variant=\"solid\"\n          size=\"md\"\n          borderRadius=\"full\"\n          mr={4}\n          onClick={() => {\n            setBoxColor(boxColor === \"black\" ? \"white\" : \"black\");\n          }}\n        >\n          D\n        </Button>\n        <Text\n          fontSize=\"4xl\"\n          fontFamily=\"Work sans\"\n          color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n        >\n          Let's Chat\n        </Text>\n      </Box>\n      <Box bg={boxColor} w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>\n              Login\n            </Tab>\n            <Tab color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>\n              Sign Up\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login boxColor={boxColor} />\n            </TabPanel>\n            <TabPanel>\n              <Signup boxColor={boxColor} />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain, boxColor }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg={boxColor === \"black\" ? \"#1C1C1C\" : \"#F8F8F8\"}\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}>\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  if ( !loggedUser || !users || users.length !== 2)\n  {\n      return \"\";\n  }\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ handleFunction,user }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain, boxColor }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg={boxColor}\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} boxColor={boxColor} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain, boxColor }) => {\n  console.log(`${boxColor} is in MyChats`);\n\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg={boxColor}\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color={boxColor === \"black\" ? \"whatsapp.100\" : \"black\"}\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            display=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n            color={\"balck\"}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg={boxColor}\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon, MoonIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer({ boxColor }) {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  console.log(`${boxColor} is the color passed to SideDrawer`);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      // console.log(data);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg={boxColor}\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"1px\"\n        borderColor=\"white\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i\n              className=\"fas fa-search\"\n              style={{ color: boxColor === \"black\" ? \"#fff\" : \"#000\" }}\n            ></i>\n            <Text\n              display={{ base: \"none\", md: \"flex\" }}\n              px={4}\n              color={boxColor === \"black\" ? \"white\" : \"black\"}\n            >\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text\n          fontSize=\"2xl\"\n          fontFamily=\"Work sans\"\n          color={boxColor === \"black\" ? \"white\" : \"black\"}\n        >\n          Let's Chat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon\n                fontSize=\"2xl\"\n                m={1}\n                style={{ color: boxColor === \"black\" ? \"#fff\" : \"#000\" }}\n              />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              bg={boxColor === \"black\" ? \"#2E2E2E\" : \"white\"}\n              rightIcon={\n                <ChevronDownIcon\n                  style={{ color: boxColor === \"black\" ? \"#fff\" : \"#000\" }}\n                />\n              }\n            >\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box display=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((Fuser) => {\n                console.log(Fuser);\n                return (\n                  <UserListItem\n                    key={Fuser._id}\n                    user={Fuser}\n                    handleFunction={() => accessChat(Fuser._id)}\n                  />\n                );\n              })\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { useLocation } from 'react-router-dom';\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n  const location = useLocation();\n  const boxColor = location.state?.boxColor || 'white';\n  console.log(boxColor);\n  \n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer boxColor={boxColor}/>}\n      <Box display=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\" >\n        {user && <MyChats fetchAgain={fetchAgain} boxColor={boxColor} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} boxColor={boxColor}/>\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n\n  const [backgroundImage, setBackgroundImage] = useState('');\n\n  useEffect(() => {\n    let randomNumber = 1;\n    for (let i = 0; i < 10; i++) {\n      randomNumber = Math.floor(Math.random() * 8) + 1;\n    }\n    const imageUrl = `image${randomNumber}.jpg`;\n    console.log(imageUrl);\n    setBackgroundImage(`url(${imageUrl})`);\n  }, []);\n\n  return (\n    <div className=\"App\" style={{ backgroundImage: backgroundImage }}>\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}